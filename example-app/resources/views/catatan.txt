*UNTUK MELIHAT REQUEST SEARCH INPUT*
dd(request("name_input"));

*UNTUK QUERY FILTER SESUAI INPUT DI SEARCH INPUT*
public function posts()
    {
        $posts = Post::latest();

        if (request("search")) {
            $posts
                ->where("title", "like", "%" . request("search") . "%")
                ->orWhere("body", "like", "%" . request("search") . "%");
        }

        return view("posts", [
            "titles" => "All Posts",
            "active" => "posts",
            "seluruhPostingan" => $posts->get(),
        ]);
    }

OPSI LAIN DENGAN TERNARY OPERATOR
{{-- <li class="nav-item">
<a class="nav-link {{ $active === 'home' ? 'active' : '' }}" href="/">Home</a>
</li>
<li class="nav-item">
<a class="nav-link {{ $active === 'about' ? 'active' : '' }}" href="/about">About</a>
</li>
<li class="nav-item">
<a class="nav-link {{ $active === 'posts' ? 'active' : '' }}" href="/blog">Blog</a>
</li>
<li class="nav-item">
<a class="nav-link {{ $active === 'categories' ? 'active' : '' }}" href="/categories">Categories</a>
</li>

App/Providers/RouteServiceProviders  :  di sini tersimpan root ke Home agar yang sudah terauthenticate gabisa login lagi. 

MENGGANTI ROUTE KEY NAME DARI NILAI DEFAULT MENJADI SLUG. INI BERGUNA DI CRUD SEROURCESS
public function getRouteKeyName()
{
    return 'slug';
}

PENGGUNAAN * PADA ROUTE BERMAKNA SUB APAPUN SETELAHNYA AKAN MENGAKTIFKAN POSTS ITU SENDIRI
{{ Request::is("dashboard/posts*") ? 'active' : '' }}

PADA VIEW posts.create METHOD POST + ACTION MAKA SECARA OTOMATIS AKAN MENGARA KE METHOD STORE KALAU KITA PAKE RESOURCE
<form method="post" action="/dashboard/posts">

PACKAGE ELOQUENT SLUGGABLE
Package ini berfungsi agar secara oromatis slug pada form memiliki snippet opsi sesuai slug yg kita miliki

TRIX EDITOR UNTUK EDITING BODY ARTIKEL DENGAN MUDAH
langsung saja cek githubnya dan lihat panduan pemakaiannya, tapi dalam latihan ini kita hanya akan menggunakan file trix.css dan trix.js di dalam folder dist. trix-core.js untuk mengedit si editor trixnya lebih lanjut